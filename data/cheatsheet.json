{
	"git": [
			{
				"Create": 
				[{
					"command" : "git init",
					"description": "Create a new local repository",
					"tag": ["create", "init", "initialize"]
				},
				{
					"command" : "git clone http://yourUrl.com/repo.git",
					"description": "Clone an existing repository",
					"tag": ["create", "clone"]
				}]
			},
			{
				"Local Changes": 
				[{
					"command" : "git status",
					"description": "Lists changed files in your working directory",
					"tag": ["local changes", "status"]
				},
				{
					"command" : "git diff",
					"description": "Display changes to tracked files",
					"tag": ["local changes", "diff", "tracked"]
				},				
				{
					"command" : "git add .",
					"description": "Add all changes to next commit",
					"tag": ["local changes", "add", "all"]
				},
				{
					"command" : "git commit -a -m \"I'm adding this message\"",
					"description": "Add all changes to next commit",
					"tag": ["local changes", "commit", "all", "message"]
				},
				{
					"command" : "\"press i to start entering text and save by pressing esc and :wq and enter\"",
					"description": "How to exit VIM if you commit without -m tag",
					"tag": ["local changes"]
				}]
			},
			{
				"History": 
				[{
					"command" : "git log",
					"description": "Show all commits, newest first.",
					"tag": ["log"]
				},
				{
					"command" : "git log -p myfile",
					"description": "Show changes over time for myfile",
					"tag": ["log"]
				},
				{
					"command" : "git blame myfile",
					"description": "See who changed what/when in myfile",
					"tag": ["blame"]
				}]
			},
			{
				"Branches": 
				[{
					"command" : "git branch -av",
					"description": "List all existing branches.",
					"tag": ["branch"]
				},
				{
					"command" : "git checkout mybranch",
					"description": "Switch to mybranch",
					"tag": ["branch"]
				},
				{
					"command" : "git branch mybranch",
					"description": "Create a new branch called mybranch",
					"tag": ["branch"]
				},
				{
					"command" : "git checkout --track http://yourUrl.com/repo.git",
					"description": "Create a new tracking branch based on a remote branch.",
					"tag": ["branch"]
				},
				{
					"command" : "git branch -d mybranch",
					"description": "delete local branch called mybranch",
					"tag": ["branch"]
				},
				{
					"command" : "git tag mytag",
					"description": "Mark current commit with a tag called mytag",
					"tag": ["branch"]
				}]
			},
			{
				"Update and Publish": 
				[{
					"command" : "git remote -v",
					"description": "List all remotes",
					"tag": ["remote", "all"]
				},
				{
					"command" : "git remote show myremote",
					"description": "Show infomation about a remote.",
					"tag": ["remote", "show"]
				},
				{
					"command" : "git remote show myremote",
					"description": "Show infomation about a remote.",
					"tag": ["remote", "show"]
				},
				{
					"command" : "git remote add myremote myurl",
					"description": "Add new remote repository named myremote at myurl",
					"tag": ["remote", "show"]
				}]
			},			
			{
				"Merge and Rebase": 
				[{
					"command" : "git merge mybranch",
					"description": "Merge mybranch into your current HEAD",
					"tag": ["merge"]
				},
				{
					"command" : "git rebase mybranch",
					"description": "Rebase your current HEAD onto mybranch",
					"tag": ["rebase"]
				}]
			}										
			],
	"gulp": [
			{
				"Setup": 
				[{
					"command" : "npm install --global gulp-cli",
					"description": "Install gulp globally.",
					"tag": ["install", "global"]
				},
				{
					"command" : "npm install --save-dev gulp",
					"description": "Install gulp in your project devDependencies.",
					"tag": ["install" , "local"]		
				}]
			},
			{
				"Running Tasks": 
				[{
					"command" : "gulp",
					"description": "Run default task.",
					"tag": ["run", "task"]
				},
				{
					"command" : "gulp mytask",
					"description": "Run task named mytask ",
					"tag": ["install" , "local"]		
				}]
			},			
			{
				"API": 
				[{
					"command" : "gulp.task('mytask', function() { // Do stuff });",
					"description": "Define a task.",
					"tag": ["task"]	
				},
				{
					"command" : "gulp.task('mytask', ['array', 'of', 'task', 'names'], function() { // Do stuff });",
					"description": "Define a task. with an array of tasks to be executed and completed before your task will run.",
					"tag": ["task"]
				},
				{
					"command" : "gulp.watch('path/to/**/*.scss', ['name of task to run'])",
					"description": "Watch files and do something when a file changes.",
					"tag": ["watch"]
				}			
				]
			}
			],
		"terminal": [
			{
				"Core Commands": 
				[{
					"command" : "cd ~",
					"description": "Change to user home directory",
					"tag": ["change", "home"]	
				},
				{
					"command" : "cd ..;",
					"description": "Change directory to the current directory's parent directory",
					"tag": ["change", "up", "parent"]
				},
				{
					"command" : "ls -a",
					"description": "List all files including hidden.",
					"tag": ["list", "hidden"]
				},
				{
					"command" : "open [myfile]",
					"description": "Open file named myfile",
					"tag": ["open", "file"]
				},				
				{
					"command" : "clear",
					"description": "Clear terminal screen.",
					"tag": ["clear"]
				}						
				]
			},		
			{
				"File Management": 
				[{
					"command" : "touch [myfile];",
					"description": "Create a new file [myfile].",
					"tag": ["touch", "create"]
				},
				{
					"command" : "pwd",
					"description": "Display path to working directory",
					"tag": ["path" , "directory"]		
				},
				{
					"command" : "mkdir [mydir]",
					"description": "make directory [mydir]",
					"tag": ["make" , "create"]		
				},				
				{
					"command" : "rm [myfile]",
					"description": "remove file [myfile]",
					"tag": ["remove" , "delete"]		
				},
				{
					"command" : "rm -r [mydir]",
					"description": "remove directory [mydir]",
					"tag": ["remove" , "delete"]		
				},
				{
					"command" : "cp [myfile] [mynewfile]",
					"description": "Copy myfile to mynewfile",
					"tag": ["copy" , "file"]		
				}				
				]
			}
			],
"bourbon": [
			{
				"Installation": 
				[{
					"command" : "gem install bourbon",
					"description": "Install the gem.",
					"tag": ["install", "gem"]
				},
				{
					"command" : "bourbon install",
					"description": "Install bourbon into local project (creates a bourbon folder)",
					"tag": ["install", "local"]		
				},
				{
					"command" : "@import \"bourbon/bourbon\";",
					"description": "Import the mixins at the beginning of your stylesheet(s)",
					"tag": ["import", "setup"]		
				}]
			},
			{
				"Animations and Transitions": 
				[{
					"command" : "@include animation(scale 1.0s ease-in, slide 2.0s ease);",
					"description": "Animation mixin supports comma separated lists of values, which allows different transitions for individual properties to be described in a single style rule.",
					"tag": ["animation"]
				},
				{
					"command" : "@include transition(opacity 1.0s ease-in 0s, width 2.0s ease-in 2s);",
					"description": "Transition provides a shorthand syntax and supports multiple transitions.",
					"tag": ["transition"]		
				},
				{
					"command" : "@include transition(all 5s $ease-in-circ);",
					"description": "CSS cubic-bezier timing functions (same as the jQuery UI) are variables that can be used with CSS3 animations and transitions.",
					"tag": ["transition"]		
				}				]
			},
			{
				"Styling": 
				[{
					"command" : "@include size(10em auto);",
					"description": "Set width and height in a single statement. Accepts all units.",
					"tag": ["size"]	
				},
				{
					"command" : "@include margin(null 10px 3em 20vh);",
					"description": "Pargin mixin accepts up to four values, including null, and uses the directional-property mixin to map them to their respective directions.",
					"tag": ["margin"]	
				},
				{
					"command" : "@include padding(20vh null 10px 3em);",
					"description": "Padding mixin accepts up to four values, including null, and uses the directional-property mixin to map them to their respective directions.",
					"tag": ["padding"]	
				},				
				{
					"command" : "@include position(relative, 0 null null 10em);",
					"description": "A shorthand notation for positioning elements.",
					"tag": ["position"]
				},
				{
					"command" : "@include text-decoration(underline double rgb(124,213,224));",
					"description": "A shorthand notation for text-decoration-color, text-decoration-line, and text-decoration-style. ",
					"tag": ["text", "decoration"]
				},
				{
					"command" : "@include word-wrap;",
					"description": "Forces long text (like URLs) to wrap instead of breaking your layout. It uses the ($word-wrap)argument, with a default value of break-word.",
					"tag": ["wrap", "text"]
				},
				{
					"command" : "@include triangle(12px 6px, gray lavender, up-left);",
					"description": "Creates a triangle. Mixin takes ($size, $color, $direction). $size accepts width (and) height. $color accepts foreground (and) background color. $direction: up, down, left, right, up-right, up-left, down-right, down-left",
					"tag": ["triangle", "shape"]
				}									
				]
			},
			{
				"Functions": 
				[{
					"command" : "linear-gradient(white 0, yellow 50%, transparent 50%)",
					"description": "Outputs a linear-gradient. Use in conjunction with the background-image mixin. The function takes the same arguments as the linear-gradient mixin.",
					"tag": ["function", "gradient", "linear"]
				},
				{
					"command" : "em(12, 24);",
					"description": "Convert pixels to ems. The parent (default 16px) can be changed by passing an optional second value. Accepts unitless and pixel values for size.",
					"tag": ["function", "pixels", "em", "convert"]		
				},
				{
					"command" : "rem(12);",
					"description": "Convert pixels to rems. This assumes 1rem is 16px. You can override this by defining a new size for the $em-base.",
					"tag": ["import", "setup"]		
				},
				{
					"command" : "tint(red, 40%);",
					"description": "Tint differs from Sass's built in lighten function. It takes a color and a percent argument.",
					"tag": ["function", "tint", "lighten"]		
				},
				{
					"command" : "shade(blue, 60%);",
					"description": "Shade differs from Sass's built in darken function. It takes a color and a percent argument.",
					"tag": ["function", "shade", "darken"]		
				}]
			}			
			],
"neat": [
			{
				"Installation": 
				[{
					"command" : "gem install neat",
					"description": "Install the gem.",
					"tag": ["install", "gem", "neat"]
				},
				{
					"command" : "neat install",
					"description": "Install neat into local project (creates a neat folder)",
					"tag": ["install", "local", "neat"]		
				},
				{
					"command" : "@import \"neat/neat\";",
					"description": "Import the mixins at the beginning of your stylesheet(s)",
					"tag": ["import", "setup", "neat"]		
				}]
			},
			{
				"Mixins": 
				[{
					"command" : "@mixin direction-context($direction: left-to-right) { ... }",
					"description": "Changes the direction property used by other mixins called in the code block argument. $direction can be left-to-right or right-to-left.",
					"tag": ["animation"]
				},
				{
					"command" : "@mixin media($query, $total-columns: $grid-columns) { ... };",
					"description": "Creates a media-query block with an optional grid context(total number of columns in grid).",
					"tag": ["media", "columns", "media-query"]		
				}				]
			},
			{
				"Variables": 
				[{
					"command" : "$column: 4.2358em default!;",
					"description": "Sets the relative width of a single grid column. ",
					"tag": ["column", "variable"]	
				},
				{
					"command" : "$visual-grid: false !default;",
					"description": "Display the visual grid by setting to true.",
					"tag": ["visual", "grid", "variable"]	
				}]
			},
			{
				"Functions": 
				[{
					"command" : "@function new-breakpoint($query, $total-columns: $grid-columns) { ... }",
					"description": "Returns a media context (media query / grid context) that can be stored and passed to media() as a single argument.",
					"tag": ["function", "media", "breakpoint"]
				}]

			}			
			]			


}




